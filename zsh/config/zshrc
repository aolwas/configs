# Update fpath before compinit

fpath=(
  /usr/local/share/zsh-completions
  /usr/local/share/zsh/site-functions
  ~/.asdf/completions
  $fpath
)

# init autocompletion.
autoload -U compinit
compinit

# linuxbrew
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH
export PATH=$PATH:$HOME/bin:$HOME/.local/bin:$HOME/.cargo/bin:$HOME/.pixi/bin:$HOME/.devops-snippets:$HOME/.krew/bin

# >>> mamba initialize >>>
# !! Contents within this block are managed by 'mamba init' !!
export MAMBA_EXE='/home/aolwas/.local/bin/micromamba';
export MAMBA_ROOT_PREFIX='/home/aolwas/micromamba';
__mamba_setup="$("$MAMBA_EXE" shell hook --shell zsh --root-prefix "$MAMBA_ROOT_PREFIX" 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__mamba_setup"
else
    alias micromamba="$MAMBA_EXE"  # Fallback on help from mamba activate
fi
unset __mamba_setup
# <<< mamba initialize <<<

# User configuration
HISTFILE=~/.zsh_history
HISTSIZE=100000
SAVEHIST=100000

# You may need to manually set your language environment
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Preferred editor for local and remote sessions
 if [[ -n $SSH_CONNECTION ]]; then
   export EDITOR='vim'
 else
   export EDITOR='vim'
 fi

# Force Emacs mode
bindkey -e

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Example aliases
# alias zshconfig="mate ~/.zshrc"
## kubernetes alias
alias k="kubectl"
alias kol="kubectl oidc-login"
function kctx() {
	kubectl-ctx $(kubectl-ctx | sk)
}
alias argo-forward="kubectl port-forward -n dataops-argo svc/dataops-argo-argo-workflows-server 2746:2746"
## Misc
alias -g '$= '
alias ezbench16="podman run --hostname podman-ezbench16 --rm --net host -it -v /tmp/.X11-unix/:/tmp/.X11-unix/ -v /dev/dri:/dev/dri -v /home/aolwas:/root -v /home/linuxbrew:/home/linuxbrew -w /root docker.io/aolwas/ezbench:16"
alias forklift-vault="podman run --rm -it -v $(pwd)/inventories:/playbooks/inventories -v /home/aolwas/.gnupg:/root/.gnupg -v $(pwd):/local  660006099962.dkr.ecr.eu-west-1.amazonaws.com/easymile/forklift:20.0.0 ansible-vault"
alias forklift="podman run --rm -it -v $(pwd)/inventories:/playbooks/inventories -v /home/aolwas/.gnupg:/root/.gnupg 660006099962.dkr.ecr.eu-west-1.amazonaws.com/easymile/forklift:20.0.0 bash"
alias docker-ecr-login="aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 660006099962.dkr.ecr.eu-west-1.amazonaws.com"
alias podman-ecr-login="aws ecr get-login-password --region eu-west-1 | podman login --username AWS --password-stdin 660006099962.dkr.ecr.eu-west-1.amazonaws.com"
alias git-set-pro-user="git config user.name 'Maxime Cottret' && git config user.email maxime.cottret@easymile.com"
alias git-set-perso-user="git config user.name 'Maxime Cottret' && git config user.email maxime.cottret@gmail.com"
alias t="tmux attach -t main || tmux new -s main"
alias cfgsway="vim $HOME/.config/sway/config"
alias reload-zsh="exec zsh"
alias dw="argo -n dataops-workflows"
alias brew-deps='brew leaves | xargs brew deps --installed --for-each | sed "s/^.*:/$(tput setaf 4)&$(tput sgr0)/"'
alias wcode="code --enable-features=UseOzonePlatform --ozone-platform=wayland"
alias docker-compose="docker compose"
function ezjupyter() {
	tag="2.3.1"
	if [ "$1" != "" ]
	then
	  tag="$1"
	fi
	docker container run --rm -it --net host -e AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id) -e AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key) -e JUPYTER_ENABLE_LAB=yes -v ${HOME}:/home/jovyan/local 660006099962.dkr.ecr.eu-west-1.amazonaws.com/easymile/jupyter-spark:${tag}
}
alias set-java-home=". ~/.asdf/plugins/java/set-java-home.zsh"
function cargo-upgrade() {
        #cargo install $(cargo install --list | egrep '^[a-z0-9_-]+ v[0-9.]+:$' | cut -f1 -d' ')
	for pkg in $(cargo install --list | egrep '^[a-z0-9_-]+ v[0-9.]+:$' | cut -f1 -d' '); do cargo install $pkg; done
}
alias chartmuseum-stable-forward="kubectl --context test-1.fm.easymile.com port-forward -n kube-system svc/chartmuseum-stable-chartmuseum 8880:8080"
alias chartmuseum-incubator-forward="kubectl --context test-1.fm.easymile.com port-forward -n kube-system svc/chartmuseum-incubator-chartmuseum 8880:8080"

export SPACESHIP_HOST_SHOW="always"

# Pixi based JAVA configuration
export JAVA_HOME="$HOME/.pixi/envs/openjdk/lib/jvm"
export JAVA_LD_LIBRARY_PATH="$HOME/.pixi/envs/openjdk/lib/server"

[ -f ~/.asdf/asdf.sh ] && source ~/.asdf/asdf.sh

[ -x "$(whence -p 'kubectl')" ] && source <(kubectl completion zsh)
[ -x "$(whence -p 'argo')" ] && source <(argo completion zsh) && compdef _argo argo
[ -x "$(whence -p 'helm')" ] && source <(helm completion zsh)
[ -x "$(whence -p 'procs')" ] && source <(procs --gen-completion-out bash)
[ -x "$(whence -p 'starship')" ] && eval "$(starship init zsh)"
[ -x "$(whence -p 'direnv')" ] && eval "$(direnv hook zsh)"
[ -x "$(whence -p 'pixi')" ] && eval "$(pixi completion --shell zsh)"
[ -x "$(whence -p 'atuin')" ] && eval "$(atuin init zsh)"
export -U PATH
